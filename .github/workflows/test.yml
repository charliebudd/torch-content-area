name: Test Release

on:
  workflow_call:
    inputs:
      local-wheels:
        type: boolean
        default: true
      wheel-location:
        type: string
        default: final-wheels
      python-versions:
        type: string
        default: "[3.6, 3.7, 3.8, 3.9]"
      pytorch-versions:
        type: string
        default: "[1.9, '1.10', 1.11, 1.12]"
      cuda-versions:
        type: string
        default: "[10.2, 11.3, 11.6]"

jobs:
  test-release:
    name: Test Release
    runs-on: [self-hosted, Linux, X64, gpu]
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(inputs.python-versions) }}
        pytorch-version: ${{ fromJson(inputs.pytorch-versions) }}
        cuda-version: ${{ fromJson(inputs.cuda-versions) }}
        exclude:
          - pytorch-version: 1.9
            cuda-version: 11.3
          - python-version: 3.6
            pytorch-version: 1.11
          - python-version: 3.6
            pytorch-version: 1.12
          - pytorch-version: 1.9
            cuda-version: 11.6 
          - pytorch-version: '1.10'
            cuda-version: 11.6 
          - pytorch-version: 1.11
            cuda-version: 11.6 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Test Requirements
        run: |
          ENV=../.venv-${{ matrix.python-version }}-${{ matrix.pytorch-version }}-${{ matrix.cuda-version }}
          if [ ! -d "$ENV" ]; then
            python -m venv $ENV
          fi
          . $ENV/bin/activate

          python -m pip install -U --force-reinstall pip
          python -m pip install numpy py-cpuinfo ecadataset
          export FULL_PYTORCH_VERSION=$(python -m pip index versions torch -f https://download.pytorch.org/whl/torch_stable.html | grep -o ${PYTORCH_VERSION}.[0-9]+cu${CUDA_VERSION//.} | head -n 1)
          python -m pip --no-cache-dir install torch==${FULL_PYTORCH_VERSION} -f https://download.pytorch.org/whl/torch_stable.html
          
          ln -s ../eca-data eca-data

          python -V
          pip show torch
        env:
          PYTORCH_VERSION: ${{ matrix.pytorch-version }}
          CUDA_VERSION: ${{ matrix.cuda-version }}
        
      - name: Install torchcontentarea From PyPI Index
        if: ${{ !inputs.local-wheels }}
        run: |
          . ../.venv-${{ matrix.python-version }}-${{ matrix.pytorch-version }}-${{ matrix.cuda-version }}/bin/activate
          python -m pip install --force-reinstall --no-deps torchcontentarea -i ${{ inputs.wheel-location }}
        
      - name: Download Cached Wheels
        if: ${{ inputs.local-wheels }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.wheel-location }}
          path: ${{ inputs.wheel-location }}
          
      - name: Install torchcontentarea from Cached Wheels
        if: ${{ inputs.local-wheels }}
        run: |
          . ../.venv-${{ matrix.python-version }}-${{ matrix.pytorch-version }}-${{ matrix.cuda-version }}/bin/activate
          python -m pip install --force-reinstall --no-deps ${{ inputs.wheel-location }}/torchcontentarea*cp$(echo ${{ matrix.python-version }} | sed 's/\.//')*.whl

      - name: Run Tests
        run: |
          . ../.venv-${{ matrix.python-version }}-${{ matrix.pytorch-version }}-${{ matrix.cuda-version }}/bin/activate
          python -m unittest tests.test_api tests.test_utils
